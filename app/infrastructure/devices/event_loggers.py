from app.config.config import event_bus
from app.infrastructure.logger_module.utils import get_logger_factory
from app.infrastructure.web_interface.ws_manager import web_ws_manager

get_logger = get_logger_factory('device')
logger = get_logger()


@event_bus.on("device_ws_connected")
async def handle_connect(device_id, websocket):
    logger.info(f'‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.')


@event_bus.on("message_from_device")
async def handle_message(device_id, message):
    logger.debug(f"üì® {device_id} –ø—Ä–∏—Å–ª–∞–ª: {message}")


@event_bus.on('message_to_device')
async def handle_message_to_device(device_id, message):
    logger.debug(f'{device_id} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}')


@event_bus.on('device_send_error')
async def handle_send_error(device_id, error):
    logger.debug(f'[{device_id}], –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {error}')


@event_bus.on('device_error')
async def handle_error(device_id, error):
    logger.debug(f"[{device_id}] –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {error}")


@event_bus.on('device_session_end')
async def handle_session_end(device_id):
    logger.debug(f'[{device_id}], –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


@event_bus.on('device_wrong_auth_token')
async def handle_auth_token_wrong(device_id):
    logger.debug(f'[{device_id}], –ù–µ–≤–µ—Ä–Ω—ã–π auth_token')


@event_bus.on('message_failed')
async def handle_message_failed(device_id, message):
    logger.debug(f"[{device_id}], –°–æ–æ–±—â–µ–Ω–∏–µ: {message} –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ –¥–æ—à–ª–æ")
    # raise RuntimeError(f'Websocket for device {device_id} not found')
